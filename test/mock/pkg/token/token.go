// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/token/token.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/token/token.go -destination=test/mock/./pkg/token/token.go
//

// Package mock_token is a generated GoMock package.
package mock_token

import (
	reflect "reflect"

	token "github.com/zhikariz/go-commerce/pkg/token"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenUseCase is a mock of TokenUseCase interface.
type MockTokenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUseCaseMockRecorder
}

// MockTokenUseCaseMockRecorder is the mock recorder for MockTokenUseCase.
type MockTokenUseCaseMockRecorder struct {
	mock *MockTokenUseCase
}

// NewMockTokenUseCase creates a new mock instance.
func NewMockTokenUseCase(ctrl *gomock.Controller) *MockTokenUseCase {
	mock := &MockTokenUseCase{ctrl: ctrl}
	mock.recorder = &MockTokenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUseCase) EXPECT() *MockTokenUseCaseMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenUseCase) GenerateAccessToken(claims token.JwtCustomClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenUseCaseMockRecorder) GenerateAccessToken(claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenUseCase)(nil).GenerateAccessToken), claims)
}
