// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/encrypt/encrypt.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/encrypt/encrypt.go -destination=test/mock/./pkg/encrypt/encrypt.go
//

// Package mock_encrypt is a generated GoMock package.
package mock_encrypt

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncryptTool is a mock of EncryptTool interface.
type MockEncryptTool struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptToolMockRecorder
}

// MockEncryptToolMockRecorder is the mock recorder for MockEncryptTool.
type MockEncryptToolMockRecorder struct {
	mock *MockEncryptTool
}

// NewMockEncryptTool creates a new mock instance.
func NewMockEncryptTool(ctrl *gomock.Controller) *MockEncryptTool {
	mock := &MockEncryptTool{ctrl: ctrl}
	mock.recorder = &MockEncryptToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptTool) EXPECT() *MockEncryptToolMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryptTool) Decrypt(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptToolMockRecorder) Decrypt(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptTool)(nil).Decrypt), text)
}

// Encrypt mocks base method.
func (m *MockEncryptTool) Encrypt(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptToolMockRecorder) Encrypt(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptTool)(nil).Encrypt), text)
}
